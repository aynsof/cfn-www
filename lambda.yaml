---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda: function for updating the Cloudfront EC2 security group ingress rules with the CloudFront IP range changes'
Resources:
  CloudfrontSecGroupLambda: 
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: UpdateSGLambda
      Handler: "update_sg.lambda_handler"
      Role:
        Fn::GetAtt: [ LambdaSGRole, "Arn" ]
      Code: 
        S3Bucket: "lambda-sg-us"
        S3Key: "update_sg.zip"
      Runtime: "python2.7"
      Timeout: 25
      TracingConfig:
        Mode: "Active"

  SNSSubscription: #logical name
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt: [ CloudfrontSecGroupLambda , "Arn" ] #lambda reference by ARN, by default serverless generates logical names by concatenating FunctionName with "LambdaFunction"
      Protocol: lambda #protocol to invoke endpoint
      TopicArn: "arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged"

  LambdaFunctionPermission: #logical name of the permission
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction #grant lambda invocations
      Principal: sns.amazonaws.com #grant rights to SNS
      SourceArn: "arn:aws:sns:us-east-1:806199016981:AmazonIpSpaceChanged"
      FunctionName:
        Fn::GetAtt: [ CloudfrontSecGroupLambda, "Arn" ] #lambda reference by ARN, by default serverless generates logical names by concatenating FunctionName with "LambdaFunction"

  LambdaSGRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ec2:AuthorizeSecurityGroupIngress
          - ec2:RevokeSecurityGroupIngress
          Resource: arn:aws:ec2:*:258402709476:security-group/*
        - Effect: Allow
          Action: ec2:DescribeSecurityGroups
          Resource: "*"
        - Effect: Allow
          Action: xray:PutTraceSegments
          Resource: "*"
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: arn:aws:logs:*:*:*
      Roles: 
        - 
          Ref: "LambdaSGRole"